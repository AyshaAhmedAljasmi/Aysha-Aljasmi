from datetime import date
from enum import Enum

class Hotel: #Represents a hotel with rooms, reservation history, and cancellation information.
    def __init__(self):
        self._list_rooms = []  #COMPOSITION: Hotel owns the rooms
        self._number_of_available_rooms = 0  # Integer representing the number of available rooms
        self._reservation_history = ""  # String to store reservation history
        self._reservation_cancellation = ""  # String to store cancellation information
    def add_room(self, room): #Adds a Room object to the hotel's list of rooms
        self._list_rooms.append(room)
        if room.get_availability_status() == "Available":
            self._number_of_available_rooms += 1
    def remove_room(self, room): #Removes a Room object from the hotel's list of rooms
        if room in self._list_rooms:
            self._list_rooms.remove(room)
            if room.get_availability_status() == "Available":
                self._number_of_available_rooms -= 1
    def get_list_rooms(self):
        return self._list_rooms #Returns the list of Room objects in the hotel
    def set_list_rooms(self, list_rooms):
        self._list_rooms = list_rooms #Sets the list of Room objects in the hotel
    def get_number_of_available_rooms(self):
        return self._number_of_available_rooms #Returns the number of available rooms in the hotel
    def set_number_of_available_rooms(self, number_of_available_rooms):
        self._number_of_available_rooms = number_of_available_rooms #Sets the number of available rooms in the hotel
    def get_reservation_history(self):
        return self._reservation_history #Returns the reservation history of the hotel
    def set_reservation_history(self, reservation_history):
        self._reservation_history = reservation_history #Sets the reservation history of the hotel
    def get_reservation_cancellation(self):
        return self._reservation_cancellation #Returns the reservation cancellation information of the hotel
    def set_reservation_cancellation(self, reservation_cancellation):
        self._reservation_cancellation = reservation_cancellation #Sets the reservation cancellation information of the hotel
    def display_hotel_info(self): #Displays the details for the hotel
        for room in self._list_rooms: #iterate through each room in the list of rooms.
            print(f"Room Number: {room.get_room_number()}")
            print(f"Amenities: {room.get_amenities()}")
            print(f"Price per Night: {room.get_price_per_night()}")
            print(f"Availability Status: {room.get_availability_status()}")
            print(f"Capacity: {room.get_capacity()}")
    def add_room_to_booking(self, room): #Adds a Room object to the booking's list of rooms
        self._rooms.append(room)
    def get_rooms(self): #Returns the list of rooms associated with the booking
        return self._rooms

class LoyaltyStatus(Enum):
    BRONZE = "Bronze" 
    SILVER = "Silver"
    GOLD = "Gold"
    PLATINUM = "Platinum"
class Guest:  # Represents a guest in the hotel system.
    def __init__(self, guest_id, guest_name, guest_dob, contact_information, loyalty_status, nationality):
        self._list_previousbooking = []  # Aggregation: List of previous bookings the guest had 
        self._guest_id = guest_id
        self._guest_name = guest_name
        self._guest_dob = guest_dob
        self._contact_information = contact_information
        self._loyalty_status = loyalty_status
        self._nationality = nationality
        self._bookings = [] #This would be the list of books booked
# Getters and setters for the Guest attributes
    def get_list_previousbooking(self):
        return self._list_previousbooking  #Returns the list of the previous booking for the guest
    def set_list_previousbooking (self, list_previousbooking):
        self._list_previousbooking = list_previousbooking  #Sets the list of previous bookings for the guest 
    def get_guest_id(self):
        return self._guest_id #Returns the guest's ID
    def set_guest_id(self, guest_id):
        self._guest_id = guest_id #Sets the guest's ID
    def get_guest_name(self):
        return self._guest_name #Returns the guest's name
    def set_guest_name(self, guest_name): #Sets the guest's name
        self._guest_name = guest_name
    def get_guest_dob(self):
        return self._guest_dob #Returns the guest's date of birth
    def set_guest_dob(self, guest_dob):
        if not isinstance(guest_dob, date):
            raise TypeError("Date of birth must be a datetime.date object.")
        self._guest_dob = guest_dob #Sets the guest's date of birth
    def get_contact_information(self):
        return self._contact_information #Returns the guest's contact information
    def set_contact_information(self, contact_information): #Sets the guest's contact information
        self._contact_information = contact_information 
    def get_loyalty_status(self):
        return self._loyalty_status #Returns the guest's loyalty status
    def set_loyalty_status(self, loyalty_status): #Sets the guest's loyalty status
        self._loyalty_status = loyalty_status 
    def get_nationality(self):
        return self._nationality #Returns the guest's nationality
    def set_nationality(self, nationality): #Sets the guest's nationality
        self._nationality = nationality
    def get_bookings(self):
        return self._bookings #Returns the list of bookings
    def set_bookings(self, bookings):
        self._bookings = bookings #Sets the list of bookings
    def display_guest_info(self): #Displays the guest's information
        print(f"Guest ID: {self._guest_id}")
        print(f"Guest Name: {self._guest_name}")
        print(f"Guest DOB: {self._guest_dob}")
        print(f"Contact Information: {self._contact_information}")
        print(f"Loyalty Status: {self._loyalty_status.value}")  #This would access the ENUM value
        print(f"Nationality: {self._nationality}")
    def request_special_service(self, service_details): #Allows the guest to request a special service.
        print(f"Special service requested by {self._guest_name}: {service_details}")
    def provide_feedback(self, feedback_text, rating): #Allows the guest to provide feedback.
        print(f"Feedback from {self._guest_name} (Rating: {rating}): {feedback_text}")
        
class Booking:  # Represents a booking in the hotel system.
    def __init__(self, booking_id, check_in_date, check_out_date, total_price, number_of_guests):
        self._list_reservation = []  # Aggregation: Booking refers to rooms
        self._rooms = []  # Aggregation: Booking refers to rooms
        self._booking_id = booking_id
        self._check_in_date = check_in_date
        self._check_out_date = check_out_date
        self._total_price = total_price
        self._number_of_guests = number_of_guests
# Getters and setters for the Booking attributes
    def get_list_reservation(self):
        return self._list_reservation  #Returns the list of the reservation
    def set_list_reservation (self, list_reservation):
        self._list_reservation = list_reservation  #Sets the list of reservations 
    def get_booking_id(self):
        return self._booking_id #Returns the booking's ID
    def set_booking_id(self, booking_id): #Sets the booking's ID
        self._booking_id = booking_id
    def get_check_in_date(self):
        return self._check_in_date #Returns the check-in date
    def set_check_in_date(self, check_in_date): #Sets the check-in date
        self._check_in_date = check_in_date
    def get_check_out_date(self):
        return self._check_out_date #Returns the check-out date
    def set_check_out_date(self, check_out_date): #Sets the check-out date
        self._check_out_date = check_out_date 
    def get_total_price(self):
        return self._total_price #Returns the total price
    def set_total_price(self, total_price): #Sets the total price
        self._total_price = total_price
    def get_number_of_guests(self): 
        return self._number_of_guests #Returns the number of guests
    def set_number_of_guests(self, number_of_guests): #Sets the number of guests
        self._number_of_guests = number_of_guests
    def get_rooms(self):
        return self._rooms #Returns the list of rooms booked
    def set_rooms(self, rooms):
        self._rooms = rooms #Sets the list of rooms booked
    def display_booking_info(self): #Displays the booking information
        print(f"Booking ID: {self._booking_id}")
        print(f"Check-in Date: {self._check_in_date}")
        print(f"Check-out Date: {self._check_out_date}")
        print(f"Total Price: {self._total_price}")
        print(f"Number of Guests: {self._number_of_guests}")
    def confirm_booking(self): #Confirms the booking
        print(f"Booking {self._booking_id} confirmed.")
    def cancel_booking(self): #It cancels the booking
        print(f"Booking {self._booking_id} has been canceled.")
    def add_room_to_booking(self, room):
        self._rooms.append(room)
        
class PaymentMethod(Enum):
    CREDIT_CARD = "Credit Card"
    DEBIT_CARD = "Debit Card"
    CASH = "Cash"
    PAYPAL = "PayPal"
class Payment: # Represents the payment in the hotel system.
    def __init__(self, payment_id, payment_method, amount_paid):
        self._payment_id = payment_id
        self._payment_method = payment_method
        self._amount_paid = amount_paid
# Getters and setters for the Booking attributes
    def get_payment_id(self):
        return self._payment_id #Returns the payment ID
    def set_payment_id(self, payment_id): #Sets the number of guests
        self._payment_id = payment_id
    def get_payment_method(self):
        return self._payment_method #Returns the payment method
    def set_payment_method(self, payment_method): #Sets the payment method
        self._payment_method = payment_method
    def get_amount_paid(self):
        return self._amount_paid #Returns the amount paid 
    def set_amount_paid(self, amount_paid): #Sets the amount paid
        self._amount_paid = amount_paid
    def display_payment_info(self): #Displays the payment information
        print(f"Payment ID: {self._payment_id}")
        print(f"Payment Method: {self._payment_method.value}")
        print(f"Amount Paid: {self._amount_paid}")

class Invoice: # Represents the invoice in the hotel system.
    def __init__(self, invoice_id, invoice_date, night_rate, additional_charges, discounts):
        self._invoice_id = invoice_id
        self._invoice_date = invoice_date
        self._night_rate = night_rate
        self._additional_charges = additional_charges
        self._discounts = discounts
    def get_invoice_id(self):
        return self._invoice_id #Returns the invoice ID
    def set_invoice_id(self, invoice_id): #Sets the invoice ID
        self._invoice_id = invoice_id
    def get_invoice_date(self): #Returns the invoice date
        return self._invoice_date
    def set_invoice_date(self, invoice_date): #Sets the invoice date
        self._invoice_date = invoice_date
    def get_night_rate(self):
        return self._night_rate #Returns the night rate
    def set_night_rate(self, night_rate):
        self._night_rate = night_rate #Sets the night rate
    def get_additional_charges(self):
        return self._additional_charges #Returns the additional charges 
    def set_additional_charges(self, additional_charges):
        self._additional_charges = additional_charges #Sets the additional charges 
    def get_discounts(self):
        return self._discounts #Returns the discounts
    def set_discounts(self, discounts):
        self._discounts = discounts #Sets the discounts
    def display_invoice_info(self): #Displays the invoice information
        print(f"Invoice ID: {self._invoice_id}")
        print(f"Invoice Date: {self._invoice_date}")
        print(f"Night Rate: {self._night_rate}")
        print(f"Additional Charges: {self._additional_charges}")
        print(f"Discounts: {self._discounts}")
    
class AvailabilityStatus(Enum):
    AVAILABLE = "Available"
    OCCUPIED = "Occupied"
    UNDER_MAINTENANCE = "Under Maintenance"
class Room:
    def __init__(self, room_number, amenities, price_per_night, availability_status, capacity):
        self._list_features = []  # Aggregation: Room owns its features
        self._room_number = room_number
        self._amenities = amenities
        self._price_per_night = price_per_night
        self._availability_status = availability_status
        self._capacity = capacity
# Getters and setters for the Room attributes 
    def get_list_features(self):
        return self._list_features  #Returns the list of the features in the room
    def set_list_features (self, list_features):
        self._list_features = list_features  #Sets the list of features in the room
    def get_room_number(self):
        return self._room_number #Returns the room number
    def set_room_number(self, room_number): #Sets the room number
        self._room_number = room_number
    def get_amenities(self):
        return self._amenities #Returns the room amenities
    def set_amenities(self, amenities): #Sets the room amenities
        self._amenities = amenities
    def get_price_per_night(self):
        return self._price_per_night #Returns the price per night
    def set_price_per_night(self, price_per_night): #Sets the price per night
        self._price_per_night = price_per_night
        if price_per_night < 0:
            raise ValueError("Price per night cannot be negative.") ############The price per night cannot be negative
        self._price_per_night = price_per_night ###########Sets the price per night
    def get_availability_status(self):
        return self._availability_status #Returns the availability status
    def set_availability_status(self, availability_status): #Sets the availability status
        self._availability_status = availability_status
    def get_capacity(self):
        return self._capacity #Returns the room capacity
    def set_capacity(self, capacity): #Sets the room capacity
        self._capacity = capacity
    def display_room_info(self): #Displays the room information
        print(f"Room Number: {self._room_number}")
        print(f"Amenities: {self._amenities}")
        print(f"Price per Night: {self._price_per_night}")
        print(f"Availability Status: {self._availability_status.value}")  # This would access the ENUM value
        print(f"Capacity: {self._capacity}")
    def report_issue(self, issue_description): #Reports an issue with the room
        print(f"Issue reported for Room {self._room_number}: {issue_description}")

class PremiumRoom(Room): #The PremiumRoom would inherit from the Class Room
    def __init__(self, room_number, amenities, price_per_night, availability_status, capacity, view, floor, welcome_gift, square_footage):
        super().__init__(room_number, amenities, price_per_night, availability_status, capacity, view, floor, welcome_gift, square_footage)
        self._view = view
        self._floor = floor
        self._welcome_gift = welcome_gift
        self._square_footage = square_footage
# Getters and setters for the PremiumRoom attributes
    def get_view(self):
        return self._view # Returns the view from the premium room
    def set_view(self, view):
        self._view = view # Sets the view of the premium room
    def get_floor(self):
        return self._floor # Returns the floor number of the premium room
    def set_floor(self, floor):
        self._floor = floor # Sets the floor number of the premium room
    def get_welcome_gift(self):
        return self._welcome_gift # Returns the welcome gift description
    def set_welcome_gift(self, welcome_gift):
        self._welcome_gift = welcome_gift # Sets the welcome gift description
    def get_square_footage(self):
        return self._square_footage # Returns the square footage of the premium room
    def set_square_footage(self, square_footage):
        self._square_footage = square_footage # Sets the square footage of the premium room
    def display_premium_room_info(self): #Displays the premium room information
        super().display_room_info()  #This will call the base class method to display common info
        print(f"View: {self._view}")
        print(f"Floor: {self._floor}")
        print(f"Welcome Gift: {self._welcome_gift}")
        print(f"Square Footage: {self._square_footage}")

class LoyaltyAwards:
    def __init__(self, program_id, points_balance, available_rewards, points_expiration=None):
        self._program_id = program_id
        self._points_balance = points_balance
        self._available_rewards = available_rewards
        self._points_expiration = points_expiration
# Getters and setters for the LoyaltyAwards attributes 
    def get_program_id(self):
        return self._program_id #Returns the program ID
    def set_program_id(self, program_id): #Sets the program ID
        self._program_id = program_id
    def get_points_balance(self):
        return self._points_balance #Returns the points balance
    def set_points_balance(self, points_balance): #Sets the points balance
        self._points_balance = points_balance
    def get_available_rewards(self):
        return self._available_rewards #Returns the available rewards
    def set_available_rewards(self, available_rewards): #Sets the available rewards
        self._available_rewards = available_rewards
    def get_points_expiration(self):
        return self._points_expiration #Returns the points expiration date
    def set_points_expiration(self, points_expiration): #Sets the points expiration date
        self._points_expiration = points_expiration
    def display_loyalty_awards_info(self): #Displays loyalty awards information
        print(f"Program ID: {self._program_id}")
        print(f"Points Balance: {self._points_balance}")
        print(f"Available Rewards: {self._available_rewards}")
        print(f"Points Expiration: {self._points_expiration}")
        
class FeedbackAndReviews:
    def __init__(self, review_id, rating, feedback_comment, review_date):
        self._review_id = review_id
        self._rating = rating
        self._feedback_comment = feedback_comment
        self._review_date = review_date
# Getters and setters for the FeedbackAndReviews attributes
    def get_review_id(self):
        return self._review_id #Returns the review ID
    def set_review_id(self, review_id): #Sets the review ID
        self._review_id = review_id
    def get_rating(self):
        return self._rating #Returns the rating
    def set_rating(self, rating): #Sets the rating
        self._rating = rating
    def get_feedback_comment(self):
        return self._feedback_comment #Returns the feedback comment
    def set_feedback_comment(self, feedback_comment): #Sets the feedback comment
        self._feedback_comment = feedback_comment
    def get_review_date(self):
        return self._review_date #Returns the review date
    def set_review_date(self, review_date): #Sets the review date
        self._review_date = review_date
    def display_feedback_and_reviews_info(self): #Displays feedback and reviews information
        print(f"Review ID: {self._review_id}")
        print(f"Rating: {self._rating}")
        print(f"Feedback Comment: {self._feedback_comment}")
        print(f"Review Date: {self._review_date}")
